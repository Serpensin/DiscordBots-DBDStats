#!/usr/bin/env python
import subprocess
import sys
import os

# Function to execute Git commands
def git(*args):
    return subprocess.check_call(['git'] + list(args))

# Check if the current branch is the master branch
def is_master_branch():
    # Get the currently checked out branch
    current_branch = subprocess.check_output(['git', 'symbolic-ref', '--short', 'HEAD']).strip().decode('utf-8')

    return current_branch == 'master'

# Main function to check variables
def check_variables():
    # Check if the current branch is the master branch
    if not is_master_branch():
        return

    # Determine the path to the Solution file (.sln)
    solution_path = subprocess.check_output(['git', 'rev-parse', '--show-toplevel']).strip().decode('utf-8')

    # Check NO_CACHE
    main_file_path = os.path.join(solution_path, 'DBDStats', 'main.py')  # Adjust the path to main.py accordingly
    with open(main_file_path, 'r', encoding='utf-8') as file:
        content = file.read()
        if 'NO_CACHE = False' not in content:
            print("ERROR: Variable 'NO_CACHE' must be set to False in main.py for committing to master branch.")
            sys.exit(1)

    # Check connection_string
    expected_connection_string = r"f'mongodb://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}'"

    with open(main_file_path, 'r', encoding='utf-8') as file:
        found_connection_string = False
        for line in file:
            line = line.strip()
            # Check if the line is not a comment and contains the expected connection string
            if not line.startswith('#') and expected_connection_string in line:
                found_connection_string = True
                break

    if not found_connection_string:
        print("ERROR: 'connection_string' must be correctly formatted in main.py for committing to master branch.")
        sys.exit(1)

    # Check Sentry environment
    expected = r"environment='Production'"
    with open(main_file_path, 'r', encoding='utf-8') as file:
        found = False
        for line in file:
            line = line.strip()
            # Check if the line is not a comment and contains the expected connection string
            if not line.startswith('#') and expected in line:
                found = True
                break

    if not found:
        print("ERROR: 'environment' for Sentry must be set to 'Production' in main.py for committing to master branch.")
        sys.exit(1)

# Execute the checks
check_variables()
